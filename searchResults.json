{
    "@odata.context": "https://schaeflein-blog.search.windows.net/indexes('posts')/$metadata#docs(guid,title,content,description,link,category,pubDate)",
    "value": [
        {
            "@search.score": 1.37849,
            "@search.highlights": {
                "content@odata.type": "#Collection(String)",
                "content": [
                    "<p>A recent project required a <em>workflow</em> that routed approval thru various departments and had a somewhat complex process once the item was approved.",
                    "I thought maybe it would be worth sharing, so I’ve published an article on my site: <a href=\"/setting-<em>workflow</em>-status-in-visual-studio-and-sharepoint-designer\">Setting <em>Workflow</em> Status in Visual Studio and SharePoint Designer</a></p>"
                ]
            },
            "guid": "8550c3a7-ad8a-423e-863a-af340ab9c67e",
            "title": "Setting Workflow Status",
            "content": "<p>A recent project required a workflow that routed approval thru various departments and had a somewhat complex process once the item was approved. As I was exploring the various options in Visual Studio and SharePoint Designer, I came across a difference between the two environments. I thought maybe it would be worth sharing, so I’ve published an article on my site: <a href=\"/setting-workflow-status-in-visual-studio-and-sharepoint-designer\">Setting Workflow Status in Visual Studio and SharePoint Designer</a></p>",
            "description": "",
            "link": "http://www.schaeflein.net/setting-workflow-status",
            "category": [],
            "pubDate": "2014-02-18T18:00:00Z"
        },
        {
            "@search.score": 0.9312899,
            "@search.highlights": {
                "content@odata.type": "#Collection(String)",
                "content": [
                    "</a></p>\n</blockquote>\n\n<h2 id=\"exampleworkflow\">Example <em>Workflow</em></h2>\n\n<p>For this article, I am referencing a <em>workflow</em> that will route a list item through two approval tasks serially.",
                    "The example <em>workflow</em> (and this article) is not intended to demonstrate the best practices for an approval <em>workflow</em>.",
                    "These details are shown on the <em>workflow</em> status page for the item (Figure 5).",
                    "</p>\n\n<p><img src=\"/content/images/2016/02/Figure6.png\" alt=\"\" />\n<em>Figure 6 – VS <em>Workflow</em> status page: Pending Task 2</em></p>\n\n<h2 id=\"workflowstatusinsharepointdesigner\"><em>Workflow</em> Status in SharePoint Designer</h2>\n\n<p>In our example SharePoint Designer-authored <em>workflow</em> (Figure 2), the Set <em>Workflow</em> Status action is used to provide feedback to our users.",
                    "The Set <em>Workflow</em> Status action is in the Core Actions group (Figure 7)."
                ]
            },
            "guid": "9756e4d3-23b4-48bc-8e67-820e675cba56",
            "title": "Setting Workflow Status in Visual Studio and SharePoint Designer",
            "content": "<p>When authoring workflows, it is a best practice to provide feedback on the status of the workflow as it moves thru the process. Both workflow authoring environments (Visual Studio and SharePoint Designer) contain built-in activities/actions to update the status. This article will review those activities, highlighting the differences between them and an approach for implementing the same behavior in both environments.</p>\n\n<p>This article will not go into details on the Workflow architecture and configuration for SharePoint 2013. For more details on those subjects, I recommend reading the <a href=\"http://www.andrewconnell.com/Tags/Workflow\">blog of my friend Andrew Connell</a> as well as his <a href=\"http://pluralsight.com/training/Authors/Details/andrew-connell\">workflow courses on Pluralsight</a>.</p>\n\n<blockquote>\n  <p>If you got here looking to resolve the error \"the referenced component microsoft.sharepoint.designtime.activities could not be found\" then you need to update the references in your Visual Studio Solution. <a href=\"http://www.andrewconnell.com/blog/fixing-sharepoint-2013-workflow-project-errors-after-upgrading-to-the-vs2013-office-tools-march-2014-update\">See Andrew Connell's post.</a></p>\n</blockquote>\n\n<h2 id=\"exampleworkflow\">Example Workflow</h2>\n\n<p>For this article, I am referencing a workflow that will route a list item through two approval tasks serially. The second task is only created if the outcome of the first task is approved. The workflow will set the status as it moves thru each activity/action: Pending Task 1, Rejected in Task 1, Pending Task 2, Rejected in Task 2, or Approved. The example workflow (and this article) is not intended to demonstrate the best practices for an approval workflow. Accordingly, I’ve coded no details on the tasks nor specific activities to perform on an approved item. The workflow is shown in Visual Studio (Figure 1) and in SharePoint Designer (Figure 2).</p>\n\n<p><img src=\"/content/images/2016/02/Figure1.png\" alt=\"\" />\n<em>Figure 1 – Example workflow in Visual Studio 2012</em></p>\n\n<p><img src=\"/content/images/2016/02/Figure2.png\" alt=\"\" />\n<em>Figure 2 – Example workflow in SharePoint Designer 2013</em></p>\n\n<h2 id=\"workflowstatusinvisualstudio\">Workflow Status in Visual Studio</h2>\n\n<p>In the default Visual Studio configuration for SharePoint workflows, the toolbox has an activity titled “SetUserStatus” that is in the “Runtime” tab (Figure 3). The activity has a single property, which is the text to set as the status. Workflows also have an internal status property, which is why the activity is titled SetUserStatus. Both of the status properties are displayed on the Workflow Status page in SharePoint (Figure 5).In the default Visual Studio configuration for SharePoint workflows, the toolbox has an activity titled “SetUserStatus” that is in the “Runtime” tab (Figure 3). The activity has a single property, which is the text to set as the status. Workflows also have an internal status property, which is why the activity is titled SetUserStatus. Both of the status properties are displayed on the Workflow Status page in SharePoint (Figure 5).</p>\n\n<p><img src=\"/content/images/2016/02/Figure3-1.png\" alt=\"\" />\n<em>Figure 3 – Visual Studio Toolbox</em></p>\n\n<p>After creating and deploying the Visual Studio workflow, I associated it with a list. When the association is performed via the browser, a column is added to the default view that reflects the workflow outcome. In Figure 4, you can see the column titled \"VSWorkflow\" and the value is initially blank.</p>\n\n<p><img src=\"/content/images/2016/02/Figure4.png\" alt=\"\" />\n<em>Figure 4 - Default view of list with Visual Studio workflow associated</em></p>\n\n<p>Once the workflow is started, it creates a task and waits for that task to be updated (Approved, Rejected). These details are shown on the workflow status page for the item (Figure 5). </p>\n\n<p><img src=\"/content/images/2016/02/Figure5.png\" alt=\"\" />\n<em>Figure 5 – VS Workflow status page: Pending Task 1</em></p>\n\n<p>At the top of the status page, notice that there is a “Status” property and an “Internal Status” property. The “SetUserStatus” activity in Visual Studio will update the “Status” property. One drawback of the SetUserStatus activity is that it does not update the column on the list. Even though the status is set to the message we coded, the list view shows no indication that the workflow is running. In fact, while the status page for an item is updated throughout the workflow (Figure 6), the list column does not change. If we wish to save some clicks for our users, we need to extend our workflow to update the list item.</p>\n\n<p><img src=\"/content/images/2016/02/Figure6.png\" alt=\"\" />\n<em>Figure 6 – VS Workflow status page: Pending Task 2</em></p>\n\n<h2 id=\"workflowstatusinsharepointdesigner\">Workflow Status in SharePoint Designer</h2>\n\n<p>In our example SharePoint Designer-authored workflow (Figure 2), the Set Workflow Status action is used to provide feedback to our users. The Set Workflow Status action is in the Core Actions group (Figure 7). <br />\n<img src=\"/content/images/2016/02/Figure7.png\" alt=\"\" />\n<em>Figure 7 – SharePoint Designer Actions</em></p>\n\n<p>With the Set Workflow Status action, the Workflow status page is updated just as we saw in the Visual Studio example (Figure 8). In addition, the list column is updated with the same status message (Figure 9). Updating the list column provides an at-a-glance view of the progress of items through workflows. This is incredibly useful if multiple list items have workflows in progress.</p>\n\n<p><img src=\"/content/images/2016/02/Figure8.png\" alt=\"\" />\n<em>Figure 8 – SPD Workflow Status Page: Pending Task 1</em></p>\n\n<p><img src=\"/content/images/2016/02/Figure9.png\" alt=\"\" />\n<em>Figure 9 – SPD Workflow status in list view</em></p>\n\n<h2 id=\"replicatingthesharepointdesignerbehaviorinvisualstudio\">Replicating the SharePoint Designer behavior in Visual Studio</h2>\n\n<p>As we can see, the SharePoint Designer Action provides more functionality than the Visual Studio Activity. If we want to replicate that behavior in Visual Studio, we have to do more work. Fortunately, there is a very simple task we can perform to leverage the SharePoint Designer actions.</p>\n\n<p>One of the capabilities of Visual Studio that is not often discussed in SharePoint discussions is that the tool box is customizable. Right-clicking on a tab (the collapsible node in the Toolbox) shows a context menu that includes an option to Choose Items (Figure 10). <br />\n<img src=\"/content/images/2016/02/Figure10.png\" alt=\"\" />\n<em>Figure 10 – Customizing the Visual Studio toolbox</em></p>\n\n<p>By default, the Workflow toolbox includes activities from the Microsoft.SharePoint.DesignTime.Activities assembly. From the Choose Toolbox Items dialog, you can browse to the {SharePointRoot}\\15\\TEMPLATE\\WorkflowActivities folder and select the Microsoft.SharePoint.WorkflowServices.Activities assembly. This assembly contains the Actions that are shown in SharePoint Designer, and more importantly this assembly is included in all on-premises installations of SharePoint 2013 and also in the Office 365 servers.</p>\n\n<p>Once the assembly is chosen, the activities (actions) it contains are available for inclusion in the Visual Studio toolbox. There are quite a few of them available, as shown in Figure 11. <br />\n<img src=\"/content/images/2016/02/Figure11.png\" alt=\"\" />\n<em>Figure 11 – Choose Toolbox Items dialog</em></p>\n\n<p>I selected the SetWorkflowStatus activity to add to my toolbox. A word of caution – I do not believe that all of the activities will work as expected. These classes are not documented, so there may be some state that is set in workflows authored in SharePoint Designer that is required of these activities.</p>\n\n<p>Clicking OK on the dialog will update the Toolbox in Visual Studio. I replaced the first SetUserStatus activity with a SetWorkflowStatus activity and then re-deployed the workflow. As show in Figure 12, the list column is updated with the status, just like in SharePoint Designer. <br />\n<img src=\"/content/images/2016/02/Figure12.png\" alt=\"\" />\n<em>Figure 12 – Visual Studio Workflow list view with column updated</em></p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>Customizing the Visual Studio toolbox can help in the development of workflows for SharePoint 2013. Since workflows authored in both environments are executed by the same Workflow Manager environment, the actions in SharePoint Designer can be used as activities in Visual Studio.</p>",
            "description": "",
            "link": "http://www.schaeflein.net/setting-workflow-status-in-visual-studio-and-sharepoint-designer",
            "category": [],
            "pubDate": "2014-02-18T18:00:00Z"
        },
        {
            "@search.score": 0.12016976,
            "@search.highlights": {
                "content@odata.type": "#Collection(String)",
                "content": [
                    "</p>\n\n<ul>\n<li><a href=\"content-organizer-link-web-part\">Content Organizer Link Web Part</a></li>\n<li><a href=\"/enhanced-booleanfield-control-for-sharepoint-publishing\">Enhanced BooleanField control for SharePoint publishing</a></li>\n<li><a href=\"/exploring-the-office-365-groups-api\">Exploring the Office 365 Groups API​​</a></li>\n<li><a href=\"/impersonation-and-elevation-of-privilege\">Impersonation and Elevation of Privilege</a></li>\n<li><a href=\"/minifying-javascript-files-with-build-events\">Minifying JavaScript Files with Build Events</a></li>\n<li><a href=\"http://www.diwug.nl/DIWUG_SharePoint_eMagazine11.pdf\">Navigation in SharePoint (DIWUG eMagazine #11)</a></li>\n<li><a href=\"/reading-the-sharepoint-change-log-from-csom\">Reading the SharePoint change log from CSOM</a></li>\n<li><a href=\"/setting-<em>workflow</em>-status-in-visual-studio-and-sharepoint-designer\">Setting <em>Workflow</em> Status in Visual Studio and SharePoint Designer</a></li>\n<li><a href=\"/sharepoint-2013-rest-and-wcf-data-services\">SharePoint 2013 REST and WCF Data Services</a></li>\n<li><a href=\"/sharepoint-people-picker-in-claims-mode-web-applications\">SharePoint People Picker in Claims-mode Web Applications</a></li>\n<li><a href=\"/sharepoint-system-notifications\">SharePoint System Notifications</a></li>\n<li><a href=\"/sharing-content-in-sharepoint-online\">Sharing Content in SharePoint Online</a></li>\n<li><a href=\"/using-application-insights-and-performance-monitor-to-troubleshoot-environment-errors\">Using Application Insights and Performance Monitor to Troubleshoot Environment Errors</a></li>\n<li><a href=\"http://www.diwug.nl/DIWUG_SharePoint_eMagazine9.pdf\">What's New in Visual Studio 2012 for SharePoint 2010 (DIWUG eMagazine #9)</a></li>\n</ul>"
                ]
            },
            "guid": "4234f13c-a8a7-4242-97e9-6f9b4e550e8e",
            "title": "Articles",
            "content": "<p>The following are articles written by Paul Schaeflein covering various aspects of SharePoint and Office 365.</p>\n\n<ul>\n<li><a href=\"content-organizer-link-web-part\">Content Organizer Link Web Part</a></li>\n<li><a href=\"/enhanced-booleanfield-control-for-sharepoint-publishing\">Enhanced BooleanField control for SharePoint publishing</a></li>\n<li><a href=\"/exploring-the-office-365-groups-api\">Exploring the Office 365 Groups API​​</a></li>\n<li><a href=\"/impersonation-and-elevation-of-privilege\">Impersonation and Elevation of Privilege</a></li>\n<li><a href=\"/minifying-javascript-files-with-build-events\">Minifying JavaScript Files with Build Events</a></li>\n<li><a href=\"http://www.diwug.nl/DIWUG_SharePoint_eMagazine11.pdf\">Navigation in SharePoint (DIWUG eMagazine #11)</a></li>\n<li><a href=\"/reading-the-sharepoint-change-log-from-csom\">Reading the SharePoint change log from CSOM</a></li>\n<li><a href=\"/setting-workflow-status-in-visual-studio-and-sharepoint-designer\">Setting Workflow Status in Visual Studio and SharePoint Designer</a></li>\n<li><a href=\"/sharepoint-2013-rest-and-wcf-data-services\">SharePoint 2013 REST and WCF Data Services</a></li>\n<li><a href=\"/sharepoint-people-picker-in-claims-mode-web-applications\">SharePoint People Picker in Claims-mode Web Applications</a></li>\n<li><a href=\"/sharepoint-system-notifications\">SharePoint System Notifications</a></li>\n<li><a href=\"/sharing-content-in-sharepoint-online\">Sharing Content in SharePoint Online</a></li>\n<li><a href=\"/using-application-insights-and-performance-monitor-to-troubleshoot-environment-errors\">Using Application Insights and Performance Monitor to Troubleshoot Environment Errors</a></li>\n<li><a href=\"http://www.diwug.nl/DIWUG_SharePoint_eMagazine9.pdf\">What's New in Visual Studio 2012 for SharePoint 2010 (DIWUG eMagazine #9)</a></li>\n</ul>",
            "description": "",
            "link": "http://www.schaeflein.net/articles",
            "category": [],
            "pubDate": "2013-01-01T18:00:00Z"
        },
        {
            "@search.score": 0.07358865,
            "@search.highlights": {
                "content@odata.type": "#Collection(String)",
                "content": [
                    "As you can imagine, there are instances where <em>workflow</em> is not used.",
                    "(The reasons for not using <em>workflow</em> are outside the scope of this article.)",
                    "A common replacement for <em>workflow</em> is event receivers, but using them creates a very brittle dependency between SharePoint and your process and has the risk of server performance degradation, data loss, or both."
                ]
            },
            "guid": "36892b48-1b68-4ec8-baf0-5da3a9d85f5d",
            "title": "Reading the SharePoint change log from CSOM",
            "content": "<p>I am quite often asked to design or review SharePoint-based solutions. A very common business requirement in these solutions is a business process that is based on a list. Of course, this is how SharePoint workflows are designed and this is a natural approach for many businesses. As you can imagine, there are instances where workflow is not used. (The reasons for not using workflow are outside the scope of this article.) A common replacement for workflow is event receivers, but using them creates a very brittle dependency between SharePoint and your process and has the risk of server performance degradation, data loss, or both. Some organizations will read the entire list and compare it to a known state. (I call this the \"rewrite SharePoint search approach and I do not recommend it.)</p>\n\n<p>One possible alternative approach is the SharePoint change log. This approach will not work for all scenarios, but in a recent customer solution it is very helpful. This solution was using a SharePoint list to make requests. The request process uses only a few columns, and once a request is processed, the SharePoint list is forgotten. (Long-time programmers like me call this a fire-and-forget process. Start the process and then forget about it.) As I set out to code the proof-of-concept, I noticed a distinct lack of examples. And thus a blog post idea was born! And, since we are in a cloud-first world, I will use the Client-side Object Model (CSOM) for my example.</p>\n\n<h2 id=\"sharepointchangelogobjectmodel\">SharePoint Change Log object model</h2>\n\n<p>Accessing the SharePoint change log is accomplished using the GetChanges() method on the primary objects:</p>\n\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/office/microsoft.sharepoint.client.site.getchanges%28v=office.15%29.aspx\">Site.GetChanges</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/office/microsoft.sharepoint.client.web.getchanges%28v=office.15%29.aspx\">Web.GetChanges</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/office/microsoft.sharepoint.client.list.getchanges%28v=office.15%29.aspx\">List.GetChanges</a></li>\n</ul>\n\n<p>As you would imagine, the methods return a collection of objects that are descendants of the object on which the call is made. For example, calling GetChanges on a list will return changes made to the list and to items (and folders and files) in that list, but will not return changes made to other lists in the same web or to the site collection-based galleries.</p>\n\n<p>Each of these methods has a parameter of type <a href=\"http://msdn.microsoft.com/en-us/library/office/microsoft.sharepoint.client.changequery%28v=office.15%29.aspx\">ChangeQuery</a>, and this type provides insight into the capabilities of the Change Log that far surpasses the MSDN reference.</p>\n\n<h2 id=\"changequeryproperties\">ChangeQuery properties</h2>\n\n<p>The properties of the ChangeQuery object can be separated into two general categories – change actions and objects changed. (Abstracting the properties to a couple of Enumerations would be a nice exercise for some ambitious reader.)</p>\n\n<p>Change Action    </p>\n\n<ul>\n<li>Add    </li>\n<li>DeleteObject    </li>\n<li>GroupMembershipAdd    </li>\n<li>GroupMembershipDelete    </li>\n<li>Move    </li>\n<li>Rename</li>\n<li>Restore</li>\n<li>RoleAssignmentAdd</li>\n<li>RoleAssignmentDelete</li>\n<li>RoleDefinitionAdd</li>\n<li>RoleDefinitionDelete</li>\n<li>RoleDefinitionUpdate</li>\n<li>SystemUpdate</li>\n<li>Update</li>\n</ul>\n\n<p>Objects Changed</p>\n\n<ul>\n<li>Alert</li>\n<li>ContentType</li>\n<li>Field</li>\n<li>File</li>\n<li>Folder</li>\n<li>Group</li>\n<li>Item</li>\n<li>List</li>\n<li>Navigation</li>\n<li>SecurityPolicy</li>\n<li>Site</li>\n<li>User</li>\n<li>View</li>\n<li>Web\n(Note that not all actions apply to all object types.)</li>\n</ul>\n\n<h2 id=\"changeclassanditsinheritancehierarchy\">Change class and its inheritance hierarchy</h2>\n\n<p>As mentioned previously, the GetChanges methods return a <a href=\"http://msdn.microsoft.com/en-us/library/office/microsoft.sharepoint.client.changecollection%28v=office.15%29.aspx\">ChangeCollection</a>. The items in the collection all inherit from the Change class. This inheritance hierarchy is crucial to understanding the items returned by the query.</p>\n\n<p>System.Object <br />\n&nbsp;&nbsp;  Microsoft.SharePoint.Client.ClientObject <br />\n&nbsp;&nbsp;&nbsp;&nbsp;    Microsoft.SharePoint.Client.Change <br />\n&nbsp;&nbsp;&nbsp;&nbsp;      Microsoft.SharePoint.Client.ChangeAlert <br />\n&nbsp;&nbsp;&nbsp;&nbsp;      Microsoft.SharePoint.Client.ChangeContentType <br />\n&nbsp;&nbsp;&nbsp;&nbsp;      Microsoft.SharePoint.Client.ChangeField <br />\n&nbsp;&nbsp;&nbsp;&nbsp;      Microsoft.SharePoint.Client.ChangeFile <br />\n&nbsp;&nbsp;&nbsp;&nbsp;      Microsoft.SharePoint.Client.ChangeFolder <br />\n&nbsp;&nbsp;&nbsp;&nbsp;      Microsoft.SharePoint.Client.ChangeGroup <br />\n&nbsp;&nbsp;&nbsp;&nbsp;      Microsoft.SharePoint.Client.ChangeItem <br />\n&nbsp;&nbsp;&nbsp;&nbsp;      Microsoft.SharePoint.Client.ChangeList <br />\n&nbsp;&nbsp;&nbsp;&nbsp;      Microsoft.SharePoint.Client.ChangeSite <br />\n&nbsp;&nbsp;&nbsp;&nbsp;      Microsoft.SharePoint.Client.ChangeUser <br />\n&nbsp;&nbsp;&nbsp;&nbsp;      Microsoft.SharePoint.Client.ChangeView <br />\n&nbsp;&nbsp;&nbsp;&nbsp;      Microsoft.SharePoint.Client.ChangeWeb</p>\n\n<p>With the understanding of the returned objects, we can process the changes by casting the change to the appropriate type, which then makes available properties that further identify the specific item that was changed.</p>\n\n<h2 id=\"processingallthechangesinasitecollection\">Processing all the changes in a site collection</h2>\n\n<p>The following code snippet will get all the changes to a site collection:</p>\n\n<pre><code class=\"language-csharp\">ClientContext clientContext = new ClientContext(siteUrl);  \nclientContext.Credentials = new SharePointOnlineCredentials(  \n                                        \"user@tenant.domain\", \n                                        ConvertToSecureString(\"SuperSecurePassword\"));\n\nvar site = clientContext.Site;  \nclientContext.Load(site);  \nChangeQuery siteCQ = new ChangeQuery(true, true);  \nvar siteChanges = site.GetChanges(siteCQ);  \nclientContext.Load(siteChanges);  \nclientContext.ExecuteQuery();\n\nforeach (Change change in siteChanges)  \n{\n    Console.WriteLine(\"{0}, {1}\", change.ChangeType, change.TypedObject);\n}\n</code></pre>\n\n<p>When run against my test site, the following types and objects are returned: <br />\n<img src=\"/content/images/2016/02/010615_0345_ReadingtheS1.png\" alt=\"\" /></p>\n\n<h2 id=\"gettingchangesforaspecificactionandorobjecttype\">Getting changes for a specific action and/or object type</h2>\n\n<p>Using the ChangeQuery properties, a subset of the actions and types can be queried:</p>\n\n<pre><code class=\"language-csharp\"> //ChangeQuery siteCQ = new ChangeQuery(true, true);\n ChangeQuery siteCQ = new ChangeQuery(false, false);\n siteCQ.Item = true;\n siteCQ.Add = true;\n siteCQ.SystemUpdate = true;\n siteCQ.DeleteObject = true;\n</code></pre>\n\n<h2 id=\"processingthechangeditems\">Processing the changed items</h2>\n\n<p>To process the items, simply test the object type and cast as appropriate:</p>\n\n<pre><code class=\"language-csharp\">foreach (Change change in changes)  \n{\n  if (change is Microsoft.SharePoint.Client.ChangeItem)\n  {\n    ChangeItem ci = change as ChangeItem;\n    changeType = ci.ChangeType.ToString();\n    itemId = ci.ItemId.ToString();\n    Console.WriteLine(\"{0}: {1}\", itemId, changeType);\n  }\n}\n</code></pre>\n\n<p><img src=\"/content/images/2016/02/010615_0345_ReadingtheS2.png\" alt=\"\" /></p>\n\n<p>Armed with the object type, and its identifier, we can make the necessary call to get the object. The list item example would be:</p>\n\n<pre><code class=\"language-csharp\">ListItem li = list.GetItemById(ci.ItemId);  \nclientContext.Load(li);  \nclientContext.ExecuteQuery();  \n</code></pre>\n\n<p>However, there is a significant is we need to account for: there is no guaranteed that the item referenced in the change log currently exists. While you may be processing an Add change, that change could have been followed by a delete. <strong>This is precisely why the change log is not appropriate for all scenarios.</strong> So, be sure to handle exceptions for missing items. (For list items, issue a CamlQuery for the ItemId and test for 0 records returned.)</p>\n\n<h2 id=\"gettingchangessincelastrun\">Getting Changes since last run</h2>\n\n<p>One additional processing item – if you poll the change log on a schedule, you will not want to re-read all the changes from the last run. The ChangeQuery has a few properties that indicated which changes are desired: ChangeTokenStart and ChangeTokenEnd. Your processing loop should store the ChangeToken of the current Change object, and then persist the last token. During subsequent runs of the program, read the last-processed token from storage and set it as the ChangeTokenStart property of the ChangeQuery. (The ChangeTokenEnd property would usually be left blank.)</p>\n\n<pre><code class=\"language-csharp\">ChangeQuery siteCQ = new ChangeQuery(false, false);  \nsiteCQ.ChangeTokenStart = lastProcessedToken;  \nsiteCQ.Item = true;  \nsiteCQ.Add = true;  \nsiteCQ.SystemUpdate = true;  \nsiteCQ.DeleteObject = true;  \n</code></pre>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>Processing the change log in sharepoint in not too different than processing any other sharepoint object: Create a query, execute the query, and process the objects. While the change log is not appropriate for all scenarios, when used it can dramatically reduce the load on the SharePoint farm and substantially reduce code execution time.</p>",
            "description": "",
            "link": "http://www.schaeflein.net/reading-the-sharepoint-change-log-from-csom",
            "category": [],
            "pubDate": "2015-01-05T18:00:00Z"
        },
			{
				"@search.score": 0.030347446,
				"@search.highlights": {
					"content@odata.type": "#Collection(String)",
					"content": [
						"The MSBUILD engine is very powerful and customizable - even without the fancy build <em>workflow</em> as part of TFS Server."
					]
				},
				"guid": "a2db28e2-d631-412c-9128-e512964fb370",
				"title": "Minifying JavaScript Files with Build Events",
				"content": "<h2 id=\"introduction\">Introduction</h2>\n\n<p>As any good web developer will tell you, having a lot of JavaScript can impact performance of a web site. One best practice for mitigating this problem is to minimize the size of JavaScript files.</p>\n\n<p>But it is not always as simple as just \"compiling\" the script into minified versions. At some times, the minified scripts are all that is necessary while at other times, having the full script file (including comments) is useful. In the SharePoint world, we often see the latter. The JavaScript published by Microsoft includes the minified files (core.js, sp.ribbon.js) as well as the raw, expanded versions (core.debug.js, sp.ribbon.debug.js). The appropriate version of these files is rendered by the server based on the setting in web.config (<compilation debug=\"true|false\"/>) or the <ScriptLink> tag via the debug attribute. In my project, we are following this paradigm by packaging both versions of the JavaScript as we develop the site.</p>\n\n<p>My first stop, and the topic of this post, is the processing of the script to reduce its size. Since every byte of the file needs to be transmitted from the client to the server, every bit should be necessary. In the JavaScript world, this is called minification, since the file is minimized. I need to point out that most of the information in this post applies to any Visual Studio project file - not just SharePoint and not just CSharp.</p>\n\n<p>Since I don't want to write JavaScript in minimized mode by hand, I set off looking for a tool.</p>\n\n<h2 id=\"approaches\">Approaches</h2>\n\n<p>As I consideredthe possible approaches to this scenario, I had a few limitations/requirements that apply due to various restraints. There is no money available to license a third-party tool; the minification process needs to run automatically and as seamless as possible; I want developers to accomplish everything inside Visual Studio; and any tools/configuration needs to be inside the source control repository.</p>\n\n<p>As a result, I had three alternatives to consider:</p>\n\n<ul>\n<li>Custom Tool that operates on the file</li>\n<li>Pre/Post events in Visual Studio</li>\n<li>Custom task in the build process</li>\n</ul>\n\n<h3 id=\"customtoolinsidevisualstudio\">Custom Tool inside Visual Studio</h3>\n\n<p>Whenever I need a tool for something in SharePoint development, I immediately look to Waldek. (Twitter followers already know about my undying love for Waldek. ? ) Sure enough, he has written a Visual Studio extension to minimize a JavaScript file using a \"Custom Tool\" in Visual Studio - <a href=\"http://visualstudiogallery.msdn.microsoft.com/04ef7cbc-23dd-49f8-b4a2-ab87885ad065\">Mavention SharePoint Assets Minifier</a>. I will let you read all about that extension directly from Waldek himself, just come back when you finish. (Please!) <a href=\"http://blog.mastykarz.nl/minifying-javascript-css-mavention-sharepoint-assets-minifier/\">http://blog.mastykarz.nl/minifying-javascript-css-mavention-sharepoint-assets-minifier/</a></p>\n\n<p>For some as-yet-undetermined reason, the extension did not run on a machine of one of the members of my team. (And, you guessed it, he is helping with the javascript.) This got me thinking, however, that a custom tool on a file in Visual Studio is only run when the file is saved in Visual Studio by someone with the tool installed and working. In a distributed development environment, I cannot make that assumption. Perhaps a developer has an issue with the extension. Perhaps she doesn't use Visual Studio to write JavaScript. Perhaps a file is added to the project but never edited? In these scenarios, we need to take a different approach. As you can imagine, the minification of the files should happen when the SharePoint solution (wsp) is built.</p>\n\n<h3 id=\"preposteventsinsidevisualstudio\">Pre/Post events inside Visual Studio</h3>\n\n<p>There are two sets of pre/post events in SharePoint projects - pre/post build and pre/post deployment. Obviously, the pre/post deployment events will not work, since they run after the wsp file is generated. The pre/post build events are promising though. They run before the packaging process, they are seamless to developers, and the settings are stored within the project file - allowing the settings to be stored in source control.</p>\n\n<h3 id=\"customtaskinbuildprocess\">Custom task in build process</h3>\n\n<p>All of the benefits of the pre/post build events also apply to the build process. There is one drawback, however. The build process typically operates on a build server after code is committed. I want the minification to happen on the developer's machines. But, if the pre/post build event is coded appropriately, they can also run on the build server.</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<p>So, how are we minifying our file? I am using the pre-build event in Visual Studio. To also leverage the build server, I created a target directly in the .csproj files and that target is part of the pre-build event processing. The remainder of this post will cover the implementation details.</p>\n\n<h3 id=\"modifyingtheprojectfile\">Modifying the project file</h3>\n\n<p>Before proceeding any further, I should note that many of the following changes are not performed using Visual Studio dialogs/windows. These changes are updates to the project file (*.csproj) which is actually an xml file that uses the MSBUILD schema. The process requires the project to be <a href=\"http://msdn.microsoft.com/en-us/library/tt479x1t\">unloaded in Visual Studio, edited and then re-loaded</a>.</p>\n\n<p>To help illustrate the changes to the project file, I started with a new, empty SharePoint project, and then added a Visual Web Part (Sandboxed). I then unloaded the project and opened the .csproj file in the XML editor, collapsing all of the PropertyGroup and ItemGroup elements. Since the order of entries in the file does not matter, I will add all customizations at the bottom: <br />\n<img src=\"/content/images/2016/02/fig1.png\" alt=\"\" /></p>\n\n<h2 id=\"itemstominimize\">Items to minimize</h2>\n\n<p>The major obstacle I had to overcome was the naming of the files. The \"source\" file name ends in \".debug.js\" and all of the metadata variables %(variable) in MSBUILD that reference an extension will only select the \".js\" part. Do you know how hard it is to remove a string from the middle of a filename in MSBUILD? Yea, it is that difficult. And it drove me nuts! And, just when I thought I was getting close, it occurred to me that using the web-industry standard naming in which the minified file ends with \".min.js\" is perfectly acceptable as well. So, I backed out of that approach and decided that the developer should specify the files to minimize in a different manner.</p>\n\n<p>The \"Build Action\" property of a file can be assigned to one of several pre-defined values. These values can be extended via a setting in the project file, as described on MSDN in the MSBUILD/Visual Studio integration page:</p>\n\n<h3 id=\"additionalbuildactions\">Additional Build Actions</h3>\n\n<p>Visual Studio allows you to change the item type name of a file in a project with the Build Action property of the File Properties window. Compile, EmbeddedResource, Content, and None item type names are always listed in this menu, along with any other item type names already in your project. To ensure any custom item type names are always available in this menu, you can add the names to an item type named AvailableItemName.</p>\n\n<p>So, I added that item group to the project, changing \"JScript\" to \"JavaScript\". A side effect of this change is an item in the solution explorer named \"JavaScript\". We will deal with that later. <br />\n<img src=\"/content/images/2016/02/fig2.png\" alt=\"\" />\n<img src=\"/content/images/2016/02/fig3.png\" alt=\"\" /></p>\n\n<p>Any file that require minification must then be assigned the type \"JavaScript\". <br />\n<img src=\"/content/images/2016/02/fig4.png\" alt=\"\" /></p>\n\n<p>Once you have an item assigned to our JavaScript build action, we can remove the JavaScript item from solution explorer (right-click, delete). When the project is opened in the future, the Build Action list is populated with items that are found in the project. So, having at least one item in the project will ensure that it remains in the Build Action list.</p>\n\n<p>Let's look again at our project file: <br />\n<img src=\"/content/images/2016/02/fig5.png\" alt=\"\" />\nLines 89 and 95 are our javascript files. And the AvailableItemName entry is no longer in the file.</p>\n\n<h3 id=\"buildtarget\">Build Target</h3>\n\n<p>Now that we have identified the files to process, we can code a build target to select those items. A build target is not normally specified in a project file, rather the standard targets are imported from the files shipped with Visual Studio. However, we are free to add whatever we need. Let's look at a target that simply lists the files that match our criteria.</p>\n\n<p>When the Build Action of a file is changed to our new value of JavaScript, the ItemName element name of that file is changed inside the project file. We can then refer to the JavaScript files using the MSBUILD item collection syntax. The following will list all of the items with the JavaScript build action/element name: <br />\n<img src=\"/content/images/2016/02/fig6.png\" alt=\"\" />\n<img src=\"/content/images/2016/02/fig7.png\" alt=\"\" /></p>\n\n<p>The target we've created shows a semi-colon separated list of items in the project that have the JavaScript build action. Looking good!</p>\n\n<h3 id=\"minimizedfilename\">Minimized file name</h3>\n\n<p>Now that we can identify the files to minimize, we are back at the problem I started with. What is the filename of the resulting minified file? Again, using Waldek's tool as inspiration, I started digging thru the MSBUILD/Visual Studio documentation. The <a href=\"http://msdn.microsoft.com/en-us/library/bb629388.aspx\">Common MSBUILD Project Items</a> page details the attributes of different item types (Build Action in VS Properties). For Content Items, two of the common attributes have relevance to our approach; DependentUpon and LastGenOutput. The following image shows how DependentUpon nests the output file below the input file: <br />\n<img src=\"/content/images/2016/02/fig8.png\" alt=\"\" />\nUnder the covers, the output files (DialogHandler.min.js &amp; VerbClientHandler.js in the picture above) are actually added to the project file as new elements, and the attributes are applied to them. The LastGenOutput attribute is applied to the input files, neatly tying the related items together (lines 89-95 and 101-107): <br />\n<img src=\"/content/images/2016/02/fig9.png\" alt=\"\" /></p>\n\n<p>So, by running Waldek's custom tool against all the necessary javascript files, or by manually modifying the project file, I will have a set of files to pass into my script compressor (the JavaScript build action), and I have the resulting filename for the output (the LastGenOutput) attribute. Once the minified files are added to the project, we need to verify that they are configured as a TemplateFile so that they are included in the SharePoint solution package. If your original file is in the LAYOUTS mapped folder, this will happen automatically. Let's modify our build target to show us both of these filenames: <br />\n<img src=\"/content/images/2016/02/fig10.png\" alt=\"\" /></p>\n\n<p><img src=\"/content/images/2016/02/fig11.png\" alt=\"\" /></p>\n\n<blockquote>\n  <p>Behind the scenes, the addition of the item metadata attribute (item metadata uses the \"%\" symbol) to the target causes MSBUILD to treat the items differently. In the first version of the target, the Message task is run once listing every item in the item collection @(JavaScript). In the second version, the Message task is run once for every unique combination of metadata. This change in processing works in our favor, since we want to minify each file individually. This concept is described as <a href=\"http://msdn.microsoft.com/en-us/library/ms171473\">MSBuild Batching</a></p>\n</blockquote>\n\n<h3 id=\"buildtask\">Build Task</h3>\n\n<p>Now that we can identify our input files and their output filenames, we need to actually perform the minification. Waldek's code is not a build task, but searching CodePlex yields a build task that uses the same script compressor: <a href=\"http://yuicompressor.codeplex.com/\">http://yuicompressor.codeplex.com/</a>. The documentation on that site is pretty complete; however, the documentation is for version 1 of the code, while the default release is version 2. In addition, version 2 does not include a compiled version of the build task. So, either download the source, or version 1.7 for .Net 3.5 (which is what I did). Remember - SharePoint 2010 runs on .Net 3.5.</p>\n\n<p>I created a second target in my project file to actually perform the compression. (Leaving the original target is helpful for debugging.) I've tweaked the selection of items a bit, to include only JavaScript items with the LastGenOutput set. Since we are using LastGenOutput for our output file name, it cannot be blank. <br />\n<img src=\"/content/images/2016/02/fig12.png\" alt=\"\" />\n<img src=\"/content/images/2016/02/fig13.png\" alt=\"\" /></p>\n\n<p>Let's take a look at the source and output files: <br />\n<img src=\"/content/images/2016/02/fig14.png\" alt=\"\" /></p>\n\n<h3 id=\"callingthetaskfromvisualstudioprebuild\">Calling the task from Visual Studio pre-build</h3>\n\n<p>The last step is to ensure that our new target is actually invoked when the project is compiled. The CodePlex site shows how to create a post-build task that launches MSBUILD to process a separate file. I used a very similar alternative - overriding the built-in Before Build target (lines 130-132): <br />\n<img src=\"/content/images/2016/02/fig15.png\" alt=\"\" />\n(By default, a csproj file will not include the BeforeBuild target. The MSBUILD process will invoke that target, if it is present: Extend the Visual Studio Build Process.)</p>\n\n<blockquote>\n  <p><strong>Important Note:</strong></p>\n  \n  <p>We need to ensure that the build task assembly, and all of its dependencies, are copied to all machines that will build the solution. I recommend creating a folder in the project named lib (short for library) to contain all assemblies required by the project. Third-party assemblies (controls/components) would usually go in this library as well.</p>\n</blockquote>\n\n<p><img src=\"/content/images/2016/02/fig16.png\" alt=\"\" /></p>\n\n<p>If a machine running a build (either within Visual Studio or with the msbuild.exe program) and the build references a task assembly that cannot be found, the build will fail. Even if the compile is successful, the build will fail.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>Thisarticle shows how to integrate an external tool for compressing javascript into the Visual Studio environment for SharePoint projects. (Although, very little is SharePoint specific.) The MSBUILD engine is very powerful and customizable - even without the fancy build workflow as part of TFS Server. I recommend that you explore the capabilities of MSBUILD the next time you encounter a pain point in Visual Studio.</p>",
				"description": "",
				"link": "http://www.schaeflein.net/minifying-javascript-files-with-build-events",
				"category": [ ],
				"pubDate": "2012-10-05T17:00:00Z"
			}
    ]
}